{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TDengine Cases Docs","text":"<p>You can switch branches on this page. For more information about how to run cases, see README.</p> <p>Case list can be found on the top bar case list docs.</p> <p>For more information about how to write new case docstring format, see Test Case Specification</p>"},{"location":"case_list_docs/data_write/sql_statement/","title":"Sql statement","text":""},{"location":"case_list_docs/data_write/sql_statement/#data_write.sql_statement.test_insert_double","title":"<code>data_write.sql_statement.test_insert_double</code>","text":""},{"location":"case_list_docs/data_write/sql_statement/#data_write.sql_statement.test_insert_double.TestInsertDouble","title":"<code>TestInsertDouble</code>","text":""},{"location":"case_list_docs/data_write/sql_statement/#data_write.sql_statement.test_insert_double.TestInsertDouble.test_insert_double","title":"<code>test_insert_double()</code>","text":"<p>\u6d4b\u8bd5\u63d2\u5165\u5404\u79cddouble\u503c</p> <p>\u63d2\u5165\u5404\u79cddouble\u503c\u5305\u62ec\u6b63\u8d1f\u503c\u3001\u79d1\u5b66\u8ba1\u6570\u6cd5\u3001\u5341\u516d\u8fdb\u5236\u3001\u4e8c\u8fdb\u5236\u3001\u5b57\u7b26\u4e32</p> <p>Since: v3.0.0.0</p> <p>Labels: common,ci</p> <p>Jira: None</p> History <ul> <li>2024-2-6 Feng Chao Created</li> <li>2025-2-26 Huo Hong Migrated to new test framework</li> </ul>"},{"location":"util_funcs_docs/new_test_framework/utils/","title":"Utils","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#sql","title":"<code>sql</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql","title":"<code>TDSql</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkAffectedRows","title":"<code>checkAffectedRows(expectAffectedRows)</code>","text":"<p>Checks if the number of affected rows from the last executed SQL statement matches the expected number of affected rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectAffectedRows</code> <code>int</code> <p>The expected number of affected rows.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of affected rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkAgg","title":"<code>checkAgg(sql, expectCnt)</code>","text":"<p>Executes an aggregate SQL query and checks if the result matches the expected count.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The aggregate SQL query to be executed.</p> required <code>expectCnt</code> <code>int</code> <p>The expected count from the aggregate query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the result of the aggregate query does not match the expected count.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkColNameList","title":"<code>checkColNameList(col_name_list, expect_col_name_list)</code>","text":"<p>Checks if the column names from the last query match the expected column names.</p> <p>Parameters:</p> Name Type Description Default <code>col_name_list</code> <code>list</code> <p>The list of column names from the last query.</p> required <code>expect_col_name_list</code> <code>list</code> <p>The list of expected column names.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the column names do not match the expected column names.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkCols","title":"<code>checkCols(expectCols)</code>","text":"<p>Checks if the number of columns fetched by the last query matches the expected number of columns.</p> <p>Parameters:</p> Name Type Description Default <code>expectCols</code> <code>int</code> <p>The expected number of columns.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of columns does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkData","title":"<code>checkData(row, col, data, show=False)</code>","text":"<p>Checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataCsv","title":"<code>checkDataCsv(sql, csvfilePath)</code>","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file, or if the sql result does not match the expected data from CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataCsvByLine","title":"<code>checkDataCsvByLine(sql, csvfilePath)</code>","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file line by line.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file,         or if the SQL result does not match the expected data from the CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataLoop","title":"<code>checkDataLoop(row, col, data, sql, loopCount, waitTime)</code>","text":"<p>Executes a SQL query in a loop and checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>loopCount</code> <code>int</code> <p>The number of times to execute the SQL query.</p> required <code>waitTime</code> <code>int</code> <p>The time to wait (in seconds) between each execution.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataMem","title":"<code>checkDataMem(sql, mem)</code>","text":"<p>Executes a SQL query and checks if the result matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataMemByLine","title":"<code>checkDataMemByLine(sql, mem)</code>","text":"<p>Executes a SQL query and checks if the result matches the expected data (Same as checkDataMem).</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataNoExist","title":"<code>checkDataNoExist(row, col, data)</code>","text":"<p>Checks if the data at the specified row and column matches the expected data without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data matches the expected data, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataType","title":"<code>checkDataType(row, col, dataType)</code>","text":"<p>Checks if the data type at the specified row and column matches the expected data type.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>dataType</code> <code>str</code> <p>The expected data type.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data type matches the expected data type, otherwise False.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkEqual","title":"<code>checkEqual(elm, expect_elm)</code>","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkFirstValue","title":"<code>checkFirstValue(sql, expect)</code>","text":"<p>Executes a SQL query and checks if the first value in the result matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expect</code> <p>The expected value of the first result.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the first value in the result does not match the expected value.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkNotEqual","title":"<code>checkNotEqual(elm, expect_elm)</code>","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowCol","title":"<code>checkRowCol(row, col)</code>","text":"<p>Checks if the specified row and column indices are within the range of the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowColNoExist","title":"<code>checkRowColNoExist(row, col)</code>","text":"<p>Checks if the specified row and column indices are within the range of the last query result without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the specified row and column indices are within the range, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRows","title":"<code>checkRows(expectedRows)</code>","text":"<p>Checks if the number of rows fetched by the last query matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRows_not_exited","title":"<code>checkRows_not_exited(expectedRows)</code>","text":"<p>Check if the query rows is equal to the expected rows :param expectedRows: The expected number of rows. :return: Returns True if the actual number of rows matches the expected number, otherwise returns False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRows_range","title":"<code>checkRows_range(excepte_row_list)</code>","text":"<p>Checks if the number of rows fetched by the last query is within the expected range.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>excepte_row_list</code> <code>list</code> <p>A list of expected row counts.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows is within the expected range, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows is not within the expected range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkSameColumn","title":"<code>checkSameColumn(c1, c2)</code>","text":"<p>Checks if the values in two specified columns are the same for all rows in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>c1</code> <code>int</code> <p>The index of the first column to be checked.</p> required <code>c2</code> <code>int</code> <p>The index of the second column to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the values in the specified columns are not the same for any row.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.close","title":"<code>close()</code>","text":"<p>Closes the cursor.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.error","title":"<code>error(sql, expectedErrno=None, expectErrInfo=None, fullMatched=True, show=False)</code>","text":"<p>Executes a SQL statement and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>expectedErrno</code> <code>int</code> <p>The expected error number. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>The expected error information. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The error information if an error occurs.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected error does not occur or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.errors","title":"<code>errors(sql_list, expected_error_id_list=None, expected_error_info_list=None)</code>","text":"<p>Executes a list of SQL queries and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expected_error_id_list</code> <code>list</code> <p>The list of expected error numbers corresponding to each SQL query. Defaults to None.</p> <code>None</code> <code>expected_error_info_list</code> <code>list</code> <p>The list of expected error information corresponding to each SQL query. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the SQL list is empty, if the execution of any SQL query fails, if the expected error does not occur, or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.execute","title":"<code>execute(sql, queryTimes=10, show=False)</code>","text":"<p>Executes a SQL statement.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 10.</p> <code>10</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.executeTimes","title":"<code>executeTimes(sql, times)</code>","text":"<p>Executes a SQL statement a specified number of times.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>times</code> <code>int</code> <p>The number of times to execute the SQL statement.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows from the last execution.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.executes","title":"<code>executes(sqls, queryTimes=30, show=False)</code>","text":"<p>Executes a list of SQL statements.</p> <p>Parameters:</p> Name Type Description Default <code>sqls</code> <code>list</code> <p>The list of SQL statements to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 30.</p> <code>30</code> <code>show</code> <code>bool</code> <p>If True, each SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL statement fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getColData","title":"<code>getColData(col)</code>","text":"<p>Retrieves all data from the specified column in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getColNameList","title":"<code>getColNameList(sql, col_tag=None)</code>","text":"<p>Executes a SQL query and retrieves the column names and optionally the column types.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>col_tag</code> <code>optional</code> <p>If provided, the method will return both column names and column types. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing the column names.</p> <code>tuple</code> <p>A tuple containing two lists - the column names and the column types, if col_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getData","title":"<code>getData(row, col)</code>","text":"<p>Retrieves the data at the specified row and column from the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Type Description <p>The data at the specified row and column.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getFirstValue","title":"<code>getFirstValue(sql)</code>","text":"<p>Executes a SQL query and retrieves the first value in the result.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Type Description <p>The first value in the result.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getResult","title":"<code>getResult(sql)</code>","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>The fetched results.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getRows","title":"<code>getRows()</code>","text":"<p>Retrieves the number of rows fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getVariable","title":"<code>getVariable(search_attr)</code>","text":"<p>Retrieves the value of a specified variable from the database.</p> <p>Parameters:</p> Name Type Description Default <code>search_attr</code> <code>str</code> <p>The name of the variable to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the value of the specified variable and the list of all variables.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.get_times","title":"<code>get_times(time_str, precision='ms')</code>","text":"<p>Converts a time string to a timestamp based on the specified precision.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>time_str</code> <code>str</code> <p>The time string to be converted. The string should end with a character indicating the time unit (e.g., 's' for seconds, 'm' for minutes).</p> required <code>precision</code> <code>str</code> <p>The precision of the timestamp. Can be \"ms\" (milliseconds), \"us\" (microseconds), or \"ns\" (nanoseconds). Defaults to \"ms\".</p> <code>'ms'</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The timestamp in the specified precision.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the time string does not end with a valid time unit character or if the precision is not valid.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.get_type","title":"<code>get_type(col)</code>","text":"<p>Retrieves the data type of the specified column in the last query result.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index for which the data type is to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The data type of the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.init","title":"<code>init(cursor, log=False)</code>","text":"<p>Initializes the TDSql instance with a database cursor and optionally enables logging.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>The database cursor to be used for executing SQL queries.</p> required <code>log</code> <code>bool</code> <p>If True, enables logging of SQL statements to a file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.is_err_sql","title":"<code>is_err_sql(sql)</code>","text":"<p>Executes a SQL statement and checks if it results in an error.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the SQL statement results in an error, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.prepare","title":"<code>prepare(dbname='db', drop=True, **kwargs)</code>","text":"<p>Prepares the database by optionally dropping it if it exists, creating it, and setting it as the active database.</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>The name of the database to be prepared. Defaults to \"db\".</p> <code>'db'</code> <code>drop</code> <code>bool</code> <p>If True, drops the database if it exists before creating it. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to be included in the database creation statement. If duration is not provided, it defaults to 100.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.query","title":"<code>query(sql, row_tag=None, queryTimes=10, count_expected_res=None, show=False)</code>","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the query in case of failure. Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute the query until the first result matches this value or the queryTimes limit is reached. Defaults to None.</p> <code>None</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched if row_tag is not provided.</p> <code>list</code> <p>The fetched results if row_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.queryAndCheckResult","title":"<code>queryAndCheckResult(sql_list, expect_result_list)</code>","text":"<p>Executes a list of SQL queries and checks the results against the expected results.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expect_result_list</code> <code>list</code> <p>The list of expected results corresponding to each SQL query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL query fails or if the results do not match the expected results.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.waitedQuery","title":"<code>waitedQuery(sql, expectedRows, timeout)</code>","text":"<p>Executes a SQL query and waits until the expected number of rows is retrieved or the timeout is reached.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expectedRows</code> <code>int</code> <p>The expected number of rows to be retrieved.</p> required <code>timeout</code> <code>int</code> <p>The maximum time to wait (in seconds) for the expected number of rows to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the number of rows retrieved and the time taken (in seconds).</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql._parse_datetime","title":"<code>_parse_datetime(timestr)</code>","text":"<p>Parse a string to a datetime object. The string can be in one of the following formats: The string can be in one of the following formats: - '%Y-%m-%d %H:%M:%S.%f%z': Contains microseconds and timezone offset. - '%Y-%m-%d %H:%M:%S%z': Contains no microseconds but contains timezone offset. - '%Y-%m-%d %H:%M:%S.%f': Contains microseconds but no timezone offset. - '%Y-%m-%d %H:%M:%S': Contains no microseconds and no timezone offset.</p> <p>Parameters:</p> Name Type Description Default <code>timestr</code> <code>str</code> <p>The string to be parsed.</p> required <p>Returns:</p> Type Description <p>datetime.datetime: The datetime object parsed from the string.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool","title":"<code>etool</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#etool.benchMark","title":"<code>benchMark(command='', json='')</code>","text":"<p>Run the <code>taosBenchmark</code> binary with a command or JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command to execute. Defaults to an empty string.</p> <code>''</code> <code>json</code> <code>str</code> <p>The path to a JSON file for execution. Defaults to an empty string.</p> <code>''</code> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the execution of the JSON file fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.benchMarkFile","title":"<code>benchMarkFile()</code>","text":"<p>Get the path to the <code>taosBenchmark</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosBenchmark</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.curFile","title":"<code>curFile(fullPath, filename)</code>","text":"<p>Get the full path to a file in the current directory.</p> <p>Parameters:</p> Name Type Description Default <code>fullPath</code> <code>str</code> <p>The full path to the current directory.</p> required <code>filename</code> <code>str</code> <p>The name of the file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the file in the current directory.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.exeBinFile","title":"<code>exeBinFile(fname, command, wait=True, show=True)</code>","text":"<p>Execute a binary file with the specified command.</p> <p>This method uses <code>utils.army.frame.eos.exe</code> or <code>utils.army.frame.eos.exeNoWait</code>  to execute the binary file. The <code>exe</code> function waits for the command to finish,  while <code>exeNoWait</code> runs the command in the background and returns immediately.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>The name of the binary file.</p> required <code>command</code> <code>str</code> <p>The command to execute.</p> required <code>wait</code> <code>bool</code> <p>Whether to wait for the command to finish. Defaults to True. - If True, uses <code>utils.army.frame.eos.exe</code>. - If False, uses <code>utils.army.frame.eos.exeNoWait</code>.</p> <code>True</code> <code>show</code> <code>bool</code> <p>Whether to log the command. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The exit status of the command execution. A return value of <code>0</code> indicates success,   while a non-zero value indicates failure.  - If <code>wait</code> is False, the return value is the exit status of the <code>nohup</code> or <code>mintty</code> command.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.runBinFile","title":"<code>runBinFile(fname, command, show=True)</code>","text":"<p>Run a binary file with the specified command.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>The name of the binary file.</p> required <code>command</code> <code>str</code> <p>The command to execute.</p> required <code>show</code> <code>bool</code> <p>Whether to log the command. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>list</code> <p>The output of the command as a list of strings.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.taosAdapterFile","title":"<code>taosAdapterFile()</code>","text":"<p>Get the path to the <code>taosAdapter</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosAdapter</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.taosDumpFile","title":"<code>taosDumpFile()</code>","text":"<p>Get the path to the <code>taosdump</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosdump</code> binary file, with <code>.exe</code> appended if on Windows.</p>"}]}